{- |
Module      : Random
Description : Provides pure functions for generating random distibutions
Stability   : experimental
-}
module Random where

import System.Random ( mkStdGen, uniformR, RandomGen )
import Data.List ( unfoldr )


{- |
The 'randInt' function returns a list of uniform distibuted 'Int' values.

/Example/: rolling a dice 10 times

>>> randInt 10 42 (1, 6)
[1,1,3,2,4,5,3,4,6,2]
-}
randInt :: Int -> Int -> (Int, Int) -> [Int]
randInt n s (min, max) =
    let ris :: RandomGen g => Int -> g -> [Int]
        ris m = take m . unfoldr (Just . uniformR (min, max))
        gen = mkStdGen s
    in
        ris n gen :: [Int]


{- |
The 'randFloat' function returns a list of uniform distibuted 'Float' values between 0 and 1.

>>> randFloat 5 42
[0.233446,0.9456366,0.3889103,0.6281131,0.5389709]
-}
randFloat :: Int -> Int -> [Float]
randFloat n s =
    let rfs :: RandomGen g => Int -> g -> [Float]
        rfs m = take m . unfoldr (Just . uniformR (0, 1))
        gen = mkStdGen s
    in
        rfs n gen :: [Float]


{- |
The 'bernoulli' function returns a Bernoulli distribution of 'Bool' values
for an experiment whith multiple tests for a given probability.

/Example/: getting a /Head/ by flipping a coin 10 times

>>> bernoulli 10 42 0.5
[True,False,True,False,False,False,True,False,False,True]
-}
bernoulli :: Int -> Int -> Float -> [Bool]
bernoulli n s p = map (< p) (randFloat n s)


{- |
The 'binomial' function returns a binomial distribution of 'Int' values.
The values are generated by repeating a bernoulli experiment with the given probability. 
The seed for conducting a single experiment is changed for every turn.

/Example/: conducting 10 experiments of flipping a coin 100 times each

>>> binomial 100 10 0.5
[57,48,41,55,40,53,44,48,48,40]
-}
binomial :: Int -> Int -> Float -> [Int]
binomial n m p
    | m == 1    = [c]
    | otherwise = c : binomial n (m-1) p
    where
    c = length (filter (== True) (bernoulli n m p))
